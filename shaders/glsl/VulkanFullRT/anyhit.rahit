/*
 * Sogang Univ, Graphics Lab, 2024
 * 
 * Abura Soba, 2025
 * 
 * Full Ray Tracing
 *
 * Any hit shader
 */

#version 460

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "../base/3dgs.glsl"
#include "../base/bufferreferences.glsl"

layout(location = 0) rayPayloadInEXT RayPayload rayPayload;

layout(binding = 6, set = 0) buffer PrimitiveIdsBuffers {
	uint64_t ids[];
}primitiveIds;

void compareAndSwapHitPayloadValue(inout RayHit hit, int idx) {
    const float dist = rayPayload.hits[idx].dist;
    if (hit.dist < dist) {
        rayPayload.hits[idx].dist = hit.dist;
        const uint id = rayPayload.hits[idx].particleId;
        rayPayload.hits[idx].particleId = hit.particleId;
        hit.dist = dist;
        hit.particleId = id;
    }
}

void main(){
#if SPLIT_BLAS
	uint64_t primitiveIdsBufferDeviceAddress = primitiveIds.ids[nonuniformEXT(gl_InstanceID)];
	PrimitiveIds prims = PrimitiveIds(primitiveIdsBufferDeviceAddress);
	uint primitiveId = prims.id[gl_PrimitiveID];
	RayHit hit = RayHit(primitiveId, gl_HitTEXT);
#else
	RayHit hit = RayHit(gl_PrimitiveID / 20, gl_HitTEXT);
#endif

	if(hit.dist < rayPayload.hits[MAX_HIT_PER_TRACE - 1].dist){
		compareAndSwapHitPayloadValue(hit, 0);
		compareAndSwapHitPayloadValue(hit, 1);
		compareAndSwapHitPayloadValue(hit, 2);
		compareAndSwapHitPayloadValue(hit, 3);
		compareAndSwapHitPayloadValue(hit, 4);
		compareAndSwapHitPayloadValue(hit, 5);
		compareAndSwapHitPayloadValue(hit, 6);
		compareAndSwapHitPayloadValue(hit, 7);
		compareAndSwapHitPayloadValue(hit, 8);
		compareAndSwapHitPayloadValue(hit, 9);
		compareAndSwapHitPayloadValue(hit, 10);
		compareAndSwapHitPayloadValue(hit, 11);
		compareAndSwapHitPayloadValue(hit, 12);
		compareAndSwapHitPayloadValue(hit, 13);
		compareAndSwapHitPayloadValue(hit, 14);
		compareAndSwapHitPayloadValue(hit, 15);

		if(rayPayload.hits[MAX_HIT_PER_TRACE - 1].dist > gl_HitTEXT){
			ignoreIntersectionEXT;
		}
		if(rayPayload.hits[MAX_HIT_PER_TRACE - 1].particleId != INVALID_PARTICLE_ID){
			terminateRayEXT;
		}
	}
}